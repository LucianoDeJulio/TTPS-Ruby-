begin
  x = 0
  begin
    fun1 x
  rescue Exception => e
    puts "Manejador de excepciones de Main"
    if x == 0
      puts "Corrección de x"
      x = 1
      retry
    end
  end
  puts "Salida"
end

El programa comienza con x igual a 0 y entra en el primer begin. Luego, llama a fun1(0).

def fun1(x)
  puts "Entrando a fun1"
  fun2 x
rescue
  puts "Manejador de excepciones de fun1"
  raise
ensure
  puts "Ejecutando ensure de fun1"
end

fun1 se ejecuta, imprime "Entrando a fun1", y llama a fun2(0).

def fun2(x)
  puts "Entrando a fun2"
  fun3
  a = 5 / x
  puts "Terminando fun2"
end

fun2 se ejecuta, imprime "Entrando a fun2", y llama a fun3.

def fun3
  puts "Entrando a fun3"
  raise RuntimeError, "Excepción intencional"
  puts "Terminando fun3"
rescue NoMethodError => e
  puts "Tratando excepción por falta de método"
rescue RuntimeError => e
  puts "Tratando excepción provocada en tiempo de ejecución"
rescue
  puts "Tratando una excepción cualquiera"
ensure
  puts "Ejecutando ensure de fun3"
end

fun3 comienza ejecutando y muestra "Entrando a fun3". Luego, lanza una excepción RuntimeError intencional.
La excepción no se maneja dentro de fun3, y el programa se mueve al rescue más cercano en la cadena de llamadas, que es el rescue Exception => e en el bloque principal.

rescue Exception => e
  puts "Manejador de excepciones de Main"
  if x == 0
    puts "Corrección de x"
    x = 1
    retry
  end
end

El programa entra en el rescue Exception => e del bloque principal y muestra "Manejador de excepciones de Main". Luego, verifica si x es igual a 0, lo que es cierto.
Realiza una corrección al valor de x, estableciéndolo en 1, y luego usa retry para reiniciar el bloque begin más interno (donde se llamó a fun1(0)).

Esto significa que el programa vuelve a intentar ejecutar fun1(1) con el valor corregido de x.

def fun1(x)
  puts "Entrando a fun1"
  fun2 x
rescue
  puts "Manejador de excepciones de fun1"
  raise
ensure
  puts "Ejecutando ensure de fun1"
end

1- Ahora, fun1 se llama con x igual a 1. Continúa ejecutando fun2(1) y, finalmente, termina de imprimir "Salida" en el bloque principal.
2- Si se permuta, dentro de fun3, el manejador de excepciones para RuntimeError y el manejador de excepciones genérico (el que tiene el rescue vacío), el flujo del programa seguirá siendo similar.
La excepción RuntimeError se manejará en el manejador de excepciones genérico en el bloque principal, ya que el rescue más específico en fun3 se omite debido a la permutación. Entonces, el resultado no cambiará drásticamente.
3- El uso de retry no afectaría el funcionamiento del programa si se mueve la línea x = 0 dentro del segundo begin (inmediatamente antes de llamar a fun1 con x).
En ese caso, el flujo de ejecución sería el mismo, y el programa seguiría funcionando de manera similar.
La razón es que el retry en el bloque principal no está directamente relacionado con la variable x, sino con la excepción que se lanza en fun3. El retry simplemente vuelve a ejecutar el bloque begin más interno.